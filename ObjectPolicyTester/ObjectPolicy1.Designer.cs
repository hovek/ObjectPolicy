//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace ObjectPolicyTester
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TestEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TestEntities object using the connection string found in the 'TestEntities' section of the application configuration file.
        /// </summary>
        public TestEntities() : base("name=TestEntities", "TestEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TestEntities object.
        /// </summary>
        public TestEntities(string connectionString) : base(connectionString, "TestEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TestEntities object.
        /// </summary>
        public TestEntities(EntityConnection connection) : base(connection, "TestEntities")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ObjectPolicyEntity> ObjectPolicyEntity
        {
            get
            {
                if ((_ObjectPolicyEntity == null))
                {
                    _ObjectPolicyEntity = base.CreateObjectSet<ObjectPolicyEntity>("ObjectPolicyEntity");
                }
                return _ObjectPolicyEntity;
            }
        }
        private ObjectSet<ObjectPolicyEntity> _ObjectPolicyEntity;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ObjectPolicyEntity EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToObjectPolicyEntity(ObjectPolicyEntity objectPolicyEntity)
        {
            base.AddObject("ObjectPolicyEntity", objectPolicyEntity);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<ObjectPolicyEntity> GetObjectPolicy(global::System.String name)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ObjectPolicyEntity>("GetObjectPolicy", nameParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<ObjectPolicyEntity> GetObjectPolicy(global::System.String name, MergeOption mergeOption)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ObjectPolicyEntity>("GetObjectPolicy", mergeOption, nameParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="ObjectPolicyEntity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ObjectPolicyEntity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ObjectPolicyEntity object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static ObjectPolicyEntity CreateObjectPolicyEntity(global::System.Int32 id)
        {
            ObjectPolicyEntity objectPolicyEntity = new ObjectPolicyEntity();
            objectPolicyEntity.Id = id;
            return objectPolicyEntity;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Objects
        {
            get
            {
                return _Objects;
            }
            set
            {
                OnObjectsChanging(value);
                ReportPropertyChanging("Objects");
                _Objects = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Objects");
                OnObjectsChanged();
            }
        }
        private global::System.String _Objects;
        partial void OnObjectsChanging(global::System.String value);
        partial void OnObjectsChanged();

        #endregion
    
    }

    #endregion
    
}
